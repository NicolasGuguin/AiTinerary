require("dotenv").config();

const OpenAI = require("openai");

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

module.exports = async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "M√©thode non autoris√©e" });
  }

  const formData = req.body;

  const prompt = `
  Tu es un expert en organisation de voyages. Ton r√¥le est de concevoir un itin√©raire intelligent, coh√©rent et personnalis√© √† partir des pr√©f√©rences suivantes :
  
  ### üß≥ D√©tails du voyageur :
  - Destination cible : ${formData.destination}
  - Dur√©e totale : ${formData.duration} jours
  - Style de voyage : ${formData.style.join(", ") || "non pr√©cis√©"}
  - Rythme souhait√© : ${formData.rhythm}
  - Type de voyage : ${formData.circularTrip ? "voyage circulaire" : "voyage aller simple"}
  - Budget global : ${formData.budget || "non pr√©cis√©"} ‚Ç¨
  - Moyens de transport autoris√©s : ${formData.transportPreferences.join(", ") || "non pr√©cis√©"}
  - Temps de transport maximum : ${formData.maxTravelDuration || "illimit√©"}
  - Vie nocturne : ${formData.nightlife}
  - √âl√©ments √† √©viter : ${formData.avoid || "aucun"}
  - Objectif principal : ${formData.purpose || "non pr√©cis√©"}
  
  ---
  
  ### üìå Contraintes de construction :
  1. Le nombre de villes doit d√©pendre du rythme :
     - Lent ‚Üí 1 √† 2 villes / semaine
     - Mod√©r√© ‚Üí 2 √† 3 villes / semaine
     - Rapide ‚Üí 3 √† 6 villes / semaine
  
  2. Le voyage doit √™tre d√©coup√© en **chunks th√©matiques** de 3 √† 10 jours.  
     Chaque chunk doit :
     - Avoir un identifiant (id) en **kebab-case**
     - Avoir un titre th√©matique
     - Contenir une ou plusieurs **cityIds**
     - √ätre **g√©ographiquement et th√©matiquement coh√©rent**
     - √ätre **distinct** des autres (√©vite les redondances)
  
  3. ‚ö†Ô∏è Ne propose **aucune ville** dans plusieurs chunks sauf exception logique **justifi√©e par la coh√©rence g√©ographique ou narrative**.
  
  4. Si le voyage est circulaire, la derni√®re ville doit √™tre proche ou identique √† la premi√®re.
  
  5. Le style (festif, nature, culturel‚Ä¶) doit guider le choix des r√©gions.
  
  6. Prends en compte les transports autoris√©s (ex : "v√©lo" = pas de longues distances).
  
  7. Si le budget est faible, √©vite les villes tr√®s ch√®res ou difficiles d'acc√®s.
  
  ---
  
  ### ‚ö†Ô∏è Consignes strictes :
  
  - Les **villes** doivent appara√Ætre **une seule fois** dans la section cities, avec :
    - un id en **kebab-case** sans accent ni majuscule (ex: "la-paz", "ho-chi-minh")
    - un name (nom r√©el de la ville)
    - ses coordonn√©es GPS : lat et lng
  
  - Les chunks doivent utiliser uniquement les **id list√©s dans \`cities\`** via le champ cityIds.
  
  - L‚Äôitin√©raire global doit former une **progression fluide g√©ographiquement**.  
    ‚ö†Ô∏è Interdiction stricte des zigzags du type "S√©oul ‚Üí Busan ‚Üí S√©oul ‚Üí Jeju".
  
  ---
  
  ### ‚úÖ Format de r√©ponse JSON attendu :
  
  {
    "countries": ["Pays 1", "Pays 2 (si applicable)"],
    "cities": [
      { "id": "tokyo", "name": "Tokyo", "lat": 35.6762, "lng": 139.6503 },
      ...
    ],
    "chunks": [
      {
        "id": "tokyo-start",
        "title": "D√©couverte de Tokyo",
        "duration": 4,
        "cityIds": ["tokyo"]
      },
      ...
    ]
  }
  
  ‚ö†Ô∏è R√©ponds exclusivement avec ce JSON, sans aucun texte ou commentaire autour.
  `;
  

  
  

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
    });

    const raw = completion.choices[0].message.content;
    const parsed = JSON.parse(raw || "{}");

    res.status(200).json(parsed);
  } catch (error) {
    console.error("Erreur OpenAI", error);
    res.status(500).json({ error: error.message });
  }
};
