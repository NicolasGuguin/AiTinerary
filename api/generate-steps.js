// /api/generate-steps.js
require("dotenv").config();
const OpenAI = require("openai");

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

module.exports = async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "M√©thode non autoris√©e" });
  }

  const { context, formData } = req.body;

  const prompt = `
  Tu es un expert en organisation de voyages sur mesure. Ta mission est de construire un itin√©raire journalier intelligent, en respectant strictement les pr√©f√©rences du voyageur.
  
  ### üéØ Objectif :
  G√©n√©rer une liste d'√©tapes journali√®res avec :
  - Le jour (day, entier commen√ßant √† 1)
  - L'identifiant de la ville (cityId, tel que fourni, **obligatoirement identique** √† ceux list√©s ci-dessous)
  - üìä Nombre d‚Äôactivit√©s par jour :
    - Si le voyage dure **moins de 6 jours** ‚Üí 3 activit√©s par jour
    - Si le voyage dure **entre 6 et 15 jours** ‚Üí 2 activit√©s par jour
    - Si le voyage dure **15 jours ou plus** ‚Üí 1 seule activit√© par jour
  
  Respecte strictement cette r√®gle. Ne propose jamais plus d‚Äôactivit√©s que ce qui est pr√©vu selon la dur√©e.
  
  ### üßæ Donn√©es du voyage :
  - üìç Destination : ${formData.destination}
  - üìÖ Date de d√©part : ${context.startDate}
  - ‚è±Ô∏è Dur√©e : ${context.duration} jours
  - üßë Nombre de voyageurs : ${formData.travelers}
  - üí∏ Budget global : ${formData.budget} ‚Ç¨
  - üò¥ Confort : ${formData.comfort}
  - üö∂‚Äç‚ôÇÔ∏è Rythme : ${formData.rhythm} (lent, mod√©r√©, rapide)
  - üß≠ Style recherch√© : ${formData.style.join(", ") || "non pr√©cis√©"}
  - üöó Transports disponibles : ${formData.transportPreferences.join(", ") || "non pr√©cis√©"}
  - üöó Temps de transport maximum entre chaque √©tape : ${formData.maxTravelDuration || "illimit√©"}
  - üåÉ Vie nocturne : ${formData.nightlife}
  - üîÅ Type de voyage : ${formData.circularTrip ? "circulaire" : "aller simple"}
  - üö´ Choses √† √©viter : ${formData.avoid || "aucune"}
  - üéØ Objectif principal : ${formData.purpose || "non pr√©cis√©"}
  
  ### üó∫Ô∏è Liste des villes disponibles :
  ${context.cities.map((c, i) => `- ${c.name} (id: "${c.id}", lat: ${c.lat}, lng: ${c.lng})`).join("\n")}
  
  ‚ö†Ô∏è Chaque cityId doit correspondre **exactement** aux id ci-dessus. Pas d'accent, pas de majuscule, format kebab-case obligatoire.
  
  ### üìå Contraintes √† respecter :
  1. Le rythme doit influencer le nombre de changements de ville.
  2. √âvite les longs trajets si le transport est limit√© (ex : √† pied ou √† v√©lo)
  3. Distribue les jours de fa√ßon √©quilibr√©e selon les distances et le style
  4. Respecte le style de voyage (ex : nature ‚Üí randonn√©es, culturel ‚Üí mus√©es, festif ‚Üí bars)
  5. Pas de nightlife si "Non" ou "indiff√©rent"
  6. Si le voyage est circulaire, la derni√®re ville doit √™tre identique ou proche de la premi√®re
  7. Pas d'activit√©s co√ªteuses si le budget est faible
  8. Chaque journ√©e doit √™tre r√©aliste et agr√©able
  9. Tu dois g√©n√©rer **exactement ${context.duration} jours** d'√©tapes (une par jour).

  
  ### üßæ Format de r√©ponse attendu (strictement) :
  [
    {
      "day": 1,
      "cityId": "hanoi",
      "activities": [
        "D√©couverte du vieux quartier",
        "D√©gustation de street food vietnamienne",
        "Croisi√®re sur le lac Hoan Kiem"
      ]
    },
    ...
  ]
  
  ‚ö†Ô∏è Tu dois g√©n√©rer exactement ${context.duration} objets (1 par jour).
  ‚ö†Ô∏è Ne r√©ponds qu‚Äôavec le JSON pur, sans explication, sans commentaire.
  `;
  
  

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
    });

    const raw = completion.choices[0].message.content;
    const steps = JSON.parse(raw || "[]");

    res.status(200).json(steps);
  } catch (error) {
    console.error("Erreur generate-steps:", error);
    res.status(500).json({ error: error.message });
  }
};
